classdef ParticleSwarm

    properties
        num_particles;
        num_iterations;
        inertia_factor;
        cog_factor;
        social_factor;
        particles;
    end
   
    methods
        function pso = ParticleSwarm(num_particles, num_iterations, ...
                inertia_factor, cog_factor, social_factor)
            pso.num_particles = num_particles;
            pso.num_iterations = num_iterations;
            pso.inertia_factor = inertia_factor;
            pso.cog_factor = cog_factor;
            pso.social_factor = social_factor;
        end

        function init_particles(~, num_particles)
            for i = 1:num_particles
                random_config = (2*pi)*rand(1, 4);
                random_velocity = -1 + 2*rand(1, 4);
                new_particle = Particle(random_config, random_velocity, ...
                    random_config, pso.inertia_factor, pso.cog_factor, ...
                    pso.social_factor);
                new_particle.fitness;
                pso.particles = [pso.particles, new_particle];
            end
        end

        function optm_process(pso)
            for i = 1:pso.num_iterations
                for j = 1:pso.num_particles
                    pso.particles(j) = pso.particles(j).update_velocity;
                    pso.particles(j) = pso.particles(j).update_position;
                    pso.particles(j) = pso.particles(j).fitness;
                    
                    if pso.particles(j).fitness < pso.particles(j).own_best{2}
                        pso.particles(j).own_best = {pso.particles(j).position, ...
                                                    pso.particles(j).fitness};
                    end
                end
            end
        end
        
    end

    
end